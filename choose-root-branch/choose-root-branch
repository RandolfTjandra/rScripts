#!/bin/zsh

# Ensure gum is installed before doing anything interactive
gum --version >/dev/null 2>&1 || { echo "gum is not installed. Please install it first." >&2; exit 1; }

CONFIG_FILE=".rScripts"
FORCE_RESELECT=false
for arg in "$@"; do
  if [[ "$arg" == "--reset" ]]; then
    FORCE_RESELECT=true
    break
  fi
done

[[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
source "$CONFIG_FILE"

if [[ "$FORCE_RESELECT" == true || -z "$ROOT_BRANCH" ]]; then
  echo "Fetching branch list..." >&2

  BRANCHES=$(gum spin --title "Fetching branches from origin..." --show-output -- bash -c '
    git ls-remote --heads origin |
    awk "{print \$2}" |
    sed "s|refs/heads/||" |
    grep -E "^main$|^feature/" |
    sort |
    awk "BEGIN{main=\"\"; others=\"\"} \$0==\"main\"{main=\$0} \$0!=\"main\"{others=others \$0 ORS} END{if(main!=\"\") print main; printf \"%s\", others}"
  ')

  ROOT_BRANCH=$(echo "$BRANCHES" | gum choose --header="Choose root branch you're currently working against")

  [[ -z "$ROOT_BRANCH" ]] && {
    echo "No branch selected. Aborting. ðŸ‘‹" >&2
    exit 1
  }

  if grep -q '^ROOT_BRANCH=' "$CONFIG_FILE"; then
    sed -i.bak "s|^ROOT_BRANCH=.*|ROOT_BRANCH=$ROOT_BRANCH|" "$CONFIG_FILE" && rm -f "$CONFIG_FILE.bak"
    echo "ROOT_BRANCH updated to $ROOT_BRANCH" >&2
  else
    echo "ROOT_BRANCH=$ROOT_BRANCH" >> "$CONFIG_FILE"
    echo "ROOT_BRANCH saved as $ROOT_BRANCH" >&2
  fi
fi

if [[ -z "$ROOT_BRANCH" ]]; then
  echo "Could not determine root branch ðŸ¤·" >&2
  exit 1
fi

printf "%s\n" "$ROOT_BRANCH"
